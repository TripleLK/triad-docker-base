---
description: 
globs: 
alwaysApply: true
---
# File Management Standards

## File Creation Rules

### Always Update Architecture
When creating new files, MUST update `triad_project_architecture.org`:
- Add file to appropriate section
- Document purpose and relationships
- Update file naming conventions if needed

### Naming Conventions
- Dates: `YYYY-MM-DD` format
- Times: `HHMMSS` format (24-hour)
- Scripts: `descriptive_name.py`
- Config: `config_name.json` or `config_name.py`  
- Tests: `test_*.py`
- Logs: `*.log`
- Org files: `descriptive_name.org`

### Prohibited Actions
- Creating files outside defined directory structure
- Making temporary files in root directory
- Modifying production database files without explicit permission
- Renaming core Django files without user approval

## Directory Structure Compliance

### AI Management Files
- `.project_management/` - All AI collaboration files
- `.cursor/rules/` - Cursor IDE behavior rules
- `.old_temporary_files/` - Archived temporary files

### Django Project Structure  
- `apps/` - Django applications only
- `scripts/` - Utility scripts
- `html_analysis_tools/` - HTML processing utilities
- `tests/` - Test files
- `config/` - Configuration files

## Documentation Requirements

### Code Documentation
- Python: Use Google-style docstrings
- Inline comments: Explain WHY, not what
- Complex logic: Add detailed comments
- Functions: Document parameters and return values

### File Headers
All new .py files should include:
```python
"""
Brief description of file purpose.

Created by: [Your Code Name]
Date: [YYYY-MM-DD]
Project: Triad Docker Base
"""
```

### Org File Headers
```org
#+TITLE: [Descriptive Title]
#+AUTHOR: [Your Code Name]  
#+DATE: [YYYY-MM-DD]
#+FILETAGS: :relevant:tags:
```

## Change Management

### Small Changes (Autonomous)
- Code style improvements
- Adding docstrings/comments
- Fixing obvious bugs
- Refactoring for clarity

### Requires Discussion
- Structural changes to Django apps
- Database schema modifications
- Major algorithm changes
- New feature implementations

### Always Document
- Record rationale for all changes
- Update relevant architecture files
- Cross-reference in conversation logs
- Note in cleanup reports

## Quality Standards

### Before Creating Files
- Verify necessity and location
- Check naming convention compliance
- Ensure proper documentation
- Plan for maintenance and updates

### Before Modifying Files
- Understand current functionality
- Consider impact on other components
- Plan testing approach
- Document expected changes

## Web Application Testing Protocol

### Browser Testing Limitations
AI models **DO NOT** have web browser access and cannot:
- Access localhost URLs or development servers
- Test admin panels, forms, or user interfaces directly
- Validate visual layouts or frontend functionality
- Perform end-to-end user testing

### Required Testing Protocol
When web testing is needed:

1. **Specify Testing Requirements**
   - Clearly state what needs to be tested
   - Define specific functionality to validate
   - Request specific information to report back
   - Note any error messages or behaviors to watch for

2. **Server Management for Testing**
   - Run development servers IN CHAT using terminal commands
   - DO NOT use background processes for testing servers
   - Use `python manage.py runserver 0.0.0.0:8001` (not background)
   - Allow user to interact with server while it runs
   - User can provide feedback through terminal comments

3. **Testing Communication**
   - Request specific URLs to test (e.g., `/admin/`, `/api/endpoint/`)
   - Ask for specific form submissions or actions
   - Request screenshots or error message details when needed
   - Specify expected vs. actual behavior validation

### Example Testing Request Format
```
Please test the admin panel functionality:
1. Navigate to http://localhost:8001/admin/
2. Log in with username: admin, password: defaultpassword
3. Verify these specific items:
   - Can access main admin dashboard
   - All Django apps appear in admin menu
   - User creation form works correctly
4. Report back: Any error messages, missing functionality, or unexpected behavior
```

@triad_project_architecture.org
