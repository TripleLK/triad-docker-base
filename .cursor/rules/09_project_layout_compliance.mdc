---
description: 
globs: 
alwaysApply: true
---
# Project Layout Compliance

## CRITICAL: Validate Before Changes
ALL structural changes MUST be validated against layout standards before implementation.

## Pre-Change Validation
BEFORE structural changes:
1. Review `docs/project_layout_standards.org`
2. Validate current state matches documented structure
3. Assess impact on protected directories/Django functionality
4. Check dependencies won't break

## Protected Directories
### NEVER Touch Without Approval
- `.project_management/` - AI collaboration framework
- `.cursor/` - AI behavior rules
- `apps/` - Django applications
- `config/` - Django configuration

### Organization Requirements
- `scripts/` - Organized by function
- `docs/` - Organized by purpose
- `data/` - Follow categorization
- `analysis_outputs/` - Use archive system

## Validation Command
ALWAYS run after structural changes:
```bash
python manage.py check --settings=config.settings.dev
```
If checks fail, immediately restore previous structure.

## Change Classification
### Minor (Autonomous)
- Adding files within existing directories
- New files following naming conventions
- Adding content to existing documentation

### Major (Approval Required)
- Moving/renaming directories
- Creating new root-level directories
- Restructuring functional organization
- Changes affecting Django imports

### Critical (Explicit Approval)
- Touching protected directories
- Moving/renaming core Django files
- Changing fundamental organization
- Changes that could break Django

## Post-Change Actions
AFTER structural changes:
1. Update `docs/project_layout_standards.org`
2. Test Django functionality
3. Update references in documentation
4. Log changes in conversation logs

## Validation Checklist
- [ ] Directories match layout standards
- [ ] Functional organization followed
- [ ] No files in incorrect locations
- [ ] Django system checks pass
- [ ] Documentation updated
- [ ] Changes logged

@docs/project_layout_standards.org
