from django.db import models
from wagtail.models import Page, Orderable, ClusterableModel
from wagtail.admin.panels import FieldRowPanel, FieldPanel, InlinePanel
from modelcluster.fields import ParentalKey
from django.forms.widgets import Media

from wagtail.fields import RichTextField
from wagtail.search import index

from taggit.models import TaggedItemBase

from modelcluster.fields import ParentalKey, ParentalManyToManyField
from modelcluster.contrib.taggit import ClusterTaggableManager

class BasicPage(Page):
    intro = models.CharField(max_length=250)
    body = RichTextField(blank=True)

    search_fields = Page.search_fields + [
        index.SearchField('intro'),
        index.SearchField('body')
    ]

    content_panels = Page.content_panels + [FieldPanel("intro"), FieldPanel("body")]

class CartPage(Page):
    pass

class ContactPage(Page):
    pass

class MultiProductPage(Page):
    pass



class Spec(ClusterableModel):
    SpecGroup = ParentalKey(
        'SpecGroup',
        related_name='specs',
    )
    key = models.CharField(
        max_length=32,
        help_text="What the specification is measuring (e.g. height)"
    )
    value = models.CharField(
        max_length=32,
        help_text="The value of the specification (e.g. 50in)"
    )

    panels = [
        FieldRowPanel([
            FieldPanel('key'),
            FieldPanel('value'),
        ])
    ]


class SpecGroup(ClusterableModel):
    name = models.CharField(
        max_length=32,
        help_text="The name of the specification group (e.g. dimensions, construction, electrical, etc.)"
    )

class EquipmentModelSpecGroup(SpecGroup):
    EquipmentModel = ParentalKey(
        'EquipmentModel',
        related_name='spec_groups',
    )

    panels = [
        FieldPanel('name'),
        InlinePanel('specs', label="Specifications"),
    ]

class LabEquipmentPageSpecGroup(SpecGroup):
    LabEquipmentPage = ParentalKey(
        'LabEquipmentPage',
        related_name='spec_groups',
    )

    panels = [
        FieldPanel( "name" ),
        InlinePanel('specs', label="Specifications"),
    ]


class LabEquipmentTag(TaggedItemBase):
    content_object = ParentalKey(
        'LabEquipmentPage',
        related_name='tagged_items',
        on_delete=models.CASCADE
    )



class EquipmentFeature(Orderable):
    """
    An orderable model for equipment features (non-pairs).
    Each equipment page can have multiple features.
    """
    page = ParentalKey(
        'LabEquipmentPage',
        related_name='features'
    )

    feature = models.CharField(
        max_length=255,
        help_text="A single equipment feature."
    )

    panels = [
        FieldPanel('feature'),
    ]

    def __str__(self):
        return self.specification

class EquipmentModel(ClusterableModel):
    page = ParentalKey(
        'LabEquipmentPage',
        related_name='models',
    )

    name = models.CharField(
        max_length=32,
        help_text="The name of the model"
    )

    model_number = models.CharField(
        max_length=32,
        help_text="The identification number of the model"
    )

    panels = [
        FieldPanel('name'),
        FieldPanel('model_number'),
        InlinePanel('spec_groups', label="Specification Groups"),
        ]


class LabEquipmentGalleryImage(Orderable):
    page = ParentalKey(
        'LabEquipmentPage',
        related_name='gallery_images',
    )

    image = models.ForeignKey(
        'wagtailimages.Image', on_delete=models.CASCADE, related_name='+'
    )

    panels = [FieldPanel('image')]

class LabEquipmentPage(Page):
    """
    A page model for a single lab equipment item.
    """
    # Use the built-in title field for the equipment name.

    short_description = RichTextField(
        blank=True,
        help_text="A brief summary of the equipment."
    )

    full_description = RichTextField(
        blank=True,
        help_text="Detailed description of the equipment."
    )

    tags = ClusterTaggableManager(through=LabEquipmentTag, blank=True)

    def main_image(self):
        gallery_item = self.gallery_images.first()
        if gallery_item:
            return gallery_item.image
        else:
            return None

    content_panels = Page.content_panels + [
        FieldPanel('short_description', classname="full"),
        FieldPanel('full_description', classname="full"),
        FieldPanel('tags'),
        InlinePanel('gallery_images', label='Images'),
        InlinePanel('spec_groups', label="Specification Groups", help_text="Technical specifications about the piece of equipment. You can override these for a specific model by adding that model below and using the same names for Specification Group and Specification."),
        InlinePanel('models', label='Models'),

    ]

    # Optionally limit what pages can host this one.
    subpage_types = []  # No subpages allowed for a detail page

    class Meta:
        verbose_name = "Lab Equipment Page"

class LabEquipmentAccessory(ClusterableModel):
    page = ParentalManyToManyField(
        'LabEquipmentPage',
        related_name='accessories',
    )

    image = models.ForeignKey(
        'wagtailimages.Image',
        related_name='+',
        on_delete=models.CASCADE
    )

    model_number = models.CharField(
        max_length=32,
        help_text="The identification number of the accessory"
    )

    name = models.CharField(
        max_length=32,
        help_text="The name of the accessory"
    )

    panels = [name, model_number, image]

