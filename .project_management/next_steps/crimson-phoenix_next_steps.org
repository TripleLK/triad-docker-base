#+TITLE: Next Steps - Crimson Phoenix
#+AUTHOR: Crimson Phoenix  
#+DATE: 2025-01-19
#+FILETAGS: :next:steps:crimson-phoenix:

* Immediate Priorities

** Priority 1: Continue Electric Shark's File Organization Work
Electric Shark made excellent progress on file organization but left important work unfinished:

### Remaining Root Directory Cleanup (~15 files still need organization)
- **Django app files**: Review and organize any Django-specific files that haven't been moved
- **Configuration files**: Ensure config files are properly categorized in triad-reorganized structure  
- **Documentation files**: README, requirements.txt, and any markdown files need proper placement

### Import Dependency Verification
- **Check moved script imports**: Verify that moved Python files don't have broken import statements
- **Django integration**: Ensure Django can still locate moved utilities if referenced in settings/apps
- **Test import paths**: Run basic import tests on reorganized Python files
- **Update any hardcoded paths**: Look for scripts that might reference old file locations

### Complete Archive System
- **Review remaining analysis outputs**: Several output directories may still be in root
- **Archive old temporary files**: Look for any remaining temp files or outdated artifacts
- **Verify archive organization**: Ensure archived files are properly categorized and documented

** Priority 2: Cursor Rules Conditional Application System
User wants cursor rules to be conditional rather than applied to ALL chats:
- Make rules "Agent Requested" with clear use case descriptions
- Group rules by functional purpose and application context
- Create tracking file that documents when each rule should be applied
- Add rule about updating the tracking index when new rules are added

* Essential Context from Electric Shark's Work

** Git Automation Ready
- **Git script available**: `scripts/git_cleanup_push.py` - comprehensive automation for AI sessions
- **Shared branch strategy**: Uses `ai-work` branch with model attribution in commits
- **Tested and working**: Script includes dry-run mode, file selection, error handling

** File Organization Foundation Established
- **Directory structure created**: `triad-reorganized/` with organized subdirectories:
  * `scripts/equipment_scrapers/`, `scripts/data_import/`, `scripts/analysis/`
  * `tests/unit/`, `tests/integration/`, `tests/fixtures/` (empty, ready for real tests)
  * `docs/api/`, `docs/deployment/`, `docs/equipment_integration/`
  * `data/selectors/`, `data/sample_payloads/`, `data/reference/`
  * `analysis_outputs/archived/`, `analysis_outputs/current/`
  * `archive/development_testing/`

** Major Files Already Moved
Electric Shark successfully organized:
- **Scripts**: 6 files → organized by function in `scripts/` subdirectories
- **Data Files**: 2 JSON files → `data/` with proper categorization  
- **Development Testing**: 7 files → `archive/development_testing/`
- **Analysis Outputs**: 6 directories → `analysis_outputs/archived/`

** User Clarifications from Electric Shark Session
- **"test" files clarification**: Were development testing, not unit tests - properly archived
- **Git push preference**: User wants separate branch (not main) - ai-work branch implemented
- **Shared branch approach**: More efficient than per-model branches

* Recommended Approach for File Organization Completion

** Use Established Patterns
1. **Follow Electric Shark's directory structure**: Use the triad-reorganized framework already created
2. **Categorize by function**: Group remaining files by purpose (config, docs, Django, etc.)
3. **Preserve Django structure**: Don't move core Django files unless explicitly needed
4. **Use git automation**: The `scripts/git_cleanup_push.py` is ready for organized commits

** Testing and Validation Strategy
1. **Import verification**: Test import statements on moved Python files
2. **Django functionality**: Ensure Django can still run after file movements  
3. **Script execution**: Test that moved scripts can still execute from new locations
4. **Documentation updates**: Update any README or docs that reference old file paths

* Decision Points for User

** File Organization Scope
- **Should ALL root files be moved?** Some files (like .gitignore, requirements.txt) might be intentionally in root
- **Django app reorganization**: Should Django apps be reorganized within triad-reorganized structure or kept separate?
- **Legacy file handling**: Should very old analysis outputs be deleted rather than archived?

** Cursor Rules Application Strategy
- **Which rules should always apply?** Basic protocols, logging requirements
- **Which should be conditional?** Django-specific, testing protocols, cleanup procedures  
- **How granular should grouping be?** By project type, by development phase, by AI role?

* Resources and References

** Key Files to Review
- **Electric Shark's cleanup**: `.project_management/cleanup_reports/electric-shark_cleanup.org`
- **Electric Shark's next steps**: `.project_management/next_steps/electric-shark_next_steps.org`
- **Current session log**: `.project_management/conversation_logs/crimson-phoenix/2025-01-19_session_log.org`
- **Project architecture**: `triad_project_architecture.org`

** Tools Available
- **Git automation**: `scripts/git_cleanup_push.py` - ready for immediate use
- **Directory structure**: `triad-reorganized/` with organized subdirectories
- **Cursor rules**: Newly restructured into 8 focused files

** Current Branch Status  
- **Working branch**: `ai-work` with 2 commits from Electric Shark
- **Remote status**: Successfully pushed and available for continued work
- **Commit pattern**: "[Description] by [Model Name]" for clear attribution

* Success Criteria

** File Organization Completion
- Root directory contains only essential Django files and project-level configs
- All reorganized files maintain functional import statements and execution capability
- Archive system is complete with all historical artifacts properly categorized
- Documentation accurately reflects new file organization structure

** Cursor Rules Conditional System
- Rules are grouped by clear functional purpose and application context
- Each rule file has documented use case and application criteria
- Tracking system maintains index of all rules and their intended purposes  
- Models can request specific rule sets based on their assigned tasks

The foundation from Electric Shark is excellent - next model should complete the systematic file organization while building the conditional cursor rules system for better AI workflow management. 