#+TITLE: Interactive Selector Command Cleanup - Cosmic Phoenix Session 2
#+AUTHOR: Cosmic Phoenix
#+DATE: 2025-01-22
#+FILETAGS: :cleanup:interactive-selector:api-planning:command-cleanup:

* Session Overview
** Mission: Clean up interactive selector commands and plan API integration
** Status: PREPARATION COMPLETE - Ready for Next Model Implementation
** Context: Follow-up to successful InlinePanel fix and backend integration

* What Was Accomplished This Session ‚úÖ

** ‚úÖ Command Cleanup and Professionalization
*** Removed redundant `test_selector.py` command (172 lines deleted)
*** Renamed `test_nested_selector.py` ‚Üí `interactive_selector.py` 
*** Updated command help text: "Launch interactive content selector with nested object support"
*** Removed all "test" language from command interface
*** Made it sound official and professional for production use

** ‚úÖ Command Analysis and Consolidation
*** Identified 4 overlapping management commands:
    - `interactive_selector.py` - MAIN comprehensive tool (kept)
    - `field_selector.py` - Field-specific selection (specialized, kept)
    - `site_field_selector.py` - Site-specific storage with testing (specialized, kept)
    - `test_ai_preparation.py` - AI preparation testing (separate concern, kept)

** ‚úÖ User Experience Improvement
*** Entry point now: `python manage.py interactive_selector [url]`
*** Professional interface with clear instructions
*** Removed confusing "test" terminology
*** Official tool for content extraction teams

* Critical Issue Discovered ‚ùå

** Database Integration Problem
*** Interactive selector imports `DatabaseOperationsManager`
*** DatabaseOperationsManager tries to import `AIPreparationRecord` (doesn't exist)
*** New system uses `SiteConfiguration`/`FieldConfiguration` models instead
*** Architecture mismatch: complex legacy vs. simple new system

** Temporary Fix Applied
*** Commented out DatabaseOperationsManager import to prevent crashes
*** Interactive selector command can now be called but database functionality is disabled
*** This is NOT a production solution - just enables command to run

* Strategic Analysis for Next Model

** The Real Problem
*** Interactive selector was built for complex AIPreparationRecord system
*** Current SiteConfiguration system is much simpler and cleaner
*** DatabaseOperationsManager has 246 lines of code for old system
*** New system only needs simple XPath storage by domain and field

** Recommended Solution Architecture
*** Replace DatabaseOperationsManager with simple API calls
*** Create lightweight API endpoint matching existing pattern
*** Use direct model operations with SiteConfiguration/FieldConfiguration
*** Maintain JavaScript interface, but simplify backend integration

* Next Model Implementation Plan

** üéØ PRIMARY GOAL: Create Simple API Integration
*** Create new endpoint: `/content-extractor/interactive-selector-save/`
*** Input: `{site_domain, field_name, xpath_selectors, comment}`
*** Direct SiteConfiguration/FieldConfiguration operations
*** Return simple success/error JSON responses

** üéØ IMPLEMENTATION STEPS:
1. **Add API endpoint in existing views.py** (follow established pattern)
2. **Update interactive_selector.py** to use API calls instead of DatabaseOperationsManager
3. **Remove or update database_operations.py** (legacy code cleanup)
4. **Test end-to-end workflow** with real XPath selection

** üéØ INTEGRATION PATTERN:
   ```
   Interactive Selector JS ‚Üí API POST ‚Üí SiteConfiguration Models ‚Üí Wagtail Admin
   ```
   (Same pattern as successfully implemented in previous session)

* Current File Status

** ‚úÖ Successfully Modified
*** `apps/content_extractor/management/commands/interactive_selector.py` - Renamed and professionalized
*** Command interface now production-ready and officially named

** ‚ö†Ô∏è Temporarily Modified  
*** `apps/content_extractor/selectors/interactive_selector.py` - Import commented out
*** This prevents crash but disables database functionality

** ‚ùå Files Needing Next Model Attention
*** `apps/content_extractor/selectors/database_operations.py` - 246 lines of legacy code
*** Interactive selector database integration - needs API replacement

* Success Criteria for Next Model

** Functional Requirements
1. ‚úÖ User can run: `python manage.py interactive_selector https://example-site.com`
2. ‚úÖ Interactive selector opens browser and loads page
3. ‚ùå XPath selections save to SiteConfiguration models (needs API)
4. ‚ùå Data appears in Wagtail admin interface (depends on #3)

** Technical Requirements  
1. ‚úÖ Command runs without import errors
2. ‚ùå Database operations work (needs API integration)
3. ‚ùå End-to-end workflow functional (depends on #2)

* Recommended Next Model Approach

** Start with API Endpoint Creation
*** Add to existing `apps/content_extractor/views.py` 
*** Follow established pattern from save_xpath_configuration()
*** Simple 20-30 line function for XPath storage

** Then Update Interactive Selector
*** Replace DatabaseOperationsManager calls with API requests
*** Maintain existing JavaScript interface functionality
*** Test with real lab equipment website

** Finally Clean Up Legacy Code
*** Remove or refactor database_operations.py
*** Ensure all commands work with new simple architecture
*** Document the simplified workflow

* Why This Approach Works

** ‚úÖ Builds on Proven Success
*** Previous session successfully implemented API pattern
*** SiteConfiguration models are working well
*** Wagtail admin integration already functional

** ‚úÖ Maintains User Experience
*** Interactive selector interface stays the same
*** Professional command-line interface achieved
*** Simplified backend makes it more reliable

** ‚úÖ Clean Architecture
*** Simple, focused components
*** Clear separation of concerns
*** Easy to maintain and extend

---

**HANDOFF TO NEXT MODEL**
**Priority**: HIGH - Core functionality restoration needed
**Complexity**: MEDIUM - Straightforward API development following established pattern
**Goal**: Restore interactive selector database functionality via clean API integration
**Success Metric**: `python manage.py interactive_selector [url]` ‚Üí select elements ‚Üí save to SiteConfiguration ‚Üí verify in admin 