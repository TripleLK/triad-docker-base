#+TITLE: Cleanup Report - Quiet Echo
#+AUTHOR: Quiet Echo
#+DATE: 2025-01-08
#+FILETAGS: :cleanup:quiet-echo:research:

* Session Overview
** Model: Quiet Echo
** Focus: DRF → Django Ninja Migration Research & Planning
** Status: Completed
** Duration: Research and planning session

* Research Findings: DRF + Wagtail Compatibility Issues

** Core Problem Confirmed
   - **Issue**: Django REST Framework expects standard Django models with `id` as primary key
   - **Wagtail Reality**: Page models use `page_ptr_id` as primary key via OneToOneField inheritance
   - **Impact**: DRF internally generates SQL queries expecting 'id' column which doesn't exist
   - **Test Failure**: Related Equipment API test failing with OperationalError on page_ptr_id

** Key Discovery: Official Wagtail + Django Ninja Support
   - **Official Documentation**: Wagtail has dedicated Django Ninja integration docs
   - **Compatibility**: Django Ninja natively handles Wagtail Page models without page_ptr_id issues
   - **Architecture**: Django Ninja uses Pydantic schemas instead of DRF serializers
   - **Performance**: Django Ninja is async-native and significantly faster than DRF

* Migration Plan: DRF → Django Ninja

** Phase 1: Environment Setup
   1. Install django-ninja: `pip install django-ninja`
   2. Add 'ninja' to INSTALLED_APPS (optional, for faster static loading)
   3. Remove DRF dependencies from settings.py
   4. Create new api.py module for Django Ninja router

** Phase 2: Schema Migration (DRF Serializers → Pydantic Schemas)
   
   *** Current DRF Structure to Replace:
       - LabEquipmentPageListSerializer
       - LabEquipmentPageDetailSerializer  
       - LabEquipmentPageCreateUpdateSerializer
       - EquipmentModelSerializer
       - LabEquipmentAccessorySerializer
       - CategorizedTagSerializer
       - QuoteCartItemSerializer

   *** New Django Ninja Schemas:
       - Use ModelSchema with Wagtail Page models (native support)
       - Leverage field aliases for computed properties
       - Implement resolver methods for complex fields
       - Use Union types for multiple page type responses

** Phase 3: View Migration (DRF ViewSets → Ninja Operations)
   
   *** System Endpoints:
       - HealthCheckView → @api.get("/health")
       - SystemStatsView → @api.get("/stats") 
       - TokenAuthView → ninja.security.HttpBearer
       - TestView → @api.get("/test")

   *** Equipment Endpoints:
       - LabEquipmentViewSet → Multiple @api operations
       - Bulk operations → @api.post("/equipment/bulk-create")
       - Search → @api.get("/equipment/search")
       - Related items → @api.get("/equipment/{id}/related")

** Phase 4: Authentication & Permissions Migration
   
   *** Current DRF System:
       - TokenAuthentication
       - Custom permission classes (AdminPermission, BatchUserPermission, etc.)
       - Custom throttling classes

   *** Django Ninja Approach:
       - HttpBearer security scheme for token auth
       - Function-based permissions using dependencies
       - Built-in rate limiting and throttling

** Phase 5: URL Migration
   
   *** Remove:
       - DRF DefaultRouter configuration
       - rest_framework URL includes

   *** Add:
       - Single api.urls inclusion in main URLs
       - Automatic OpenAPI documentation at /api/docs

** Phase 6: Testing Migration
   
   *** Replace:
       - DRF APITestCase classes
       - DRF test client usage

   *** Implement:
       - Django Ninja TestClient
       - Pydantic schema validation testing
       - Async endpoint testing where applicable

* Benefits of Migration

** Immediate Fixes:
   - Resolves page_ptr_id compatibility issue with Wagtail
   - Eliminates Related Equipment API test failure
   - Reduces codebase complexity (no more serializers/viewsets/routers)

** Performance Improvements:
   - Async-native architecture
   - Faster response times
   - Reduced memory usage
   - Better under high load

** Developer Experience:
   - Type hints throughout (Python 3.10+ compatibility)
   - Automatic OpenAPI documentation generation
   - Simpler code structure
   - Better error messages
   - Interactive API docs at /api/docs

** Future-Proofing:
   - Django Ninja is actively developed and growing
   - Better alignment with modern Python practices
   - Easier maintenance and updates
   - Official Wagtail support ensures compatibility

* Risk Assessment

** Low Risk Factors:
   - Django Ninja has official Wagtail integration
   - Well-documented migration path
   - Type-safe implementation reduces runtime errors
   - Can be implemented incrementally

** Migration Complexity:
   - **Low-Medium**: Schemas are simpler than DRF serializers
   - **Benefit**: Removing authentication/permissions/throttling middleware simplifies architecture
   - **Testing**: Ninja TestClient similar to DRF test patterns

* Implementation Strategy

** Recommended Approach:
   1. **Parallel Implementation**: Build Ninja API alongside existing DRF (different URL prefix)
   2. **Gradual Migration**: Move endpoints one by one
   3. **Testing**: Ensure feature parity before switching
   4. **Cleanup**: Remove DRF once migration complete

** Estimated Timeline:
   - Phase 1 (Setup): 1-2 hours
   - Phase 2 (Schemas): 4-6 hours  
   - Phase 3 (Views): 6-8 hours
   - Phase 4 (Auth): 2-3 hours
   - Phase 5 (URLs): 1 hour
   - Phase 6 (Testing): 3-4 hours
   - **Total**: 17-24 hours of development time

* Files to be Modified/Created

** New Files:
   - api.py (main Django Ninja router)
   - schemas.py (Pydantic schemas)
   - security.py (authentication schemes)

** Modified Files:
   - config/settings/base.py (remove DRF, add Ninja)
   - config/urls.py (replace DRF URLs with Ninja)
   - apps/lab_equipment_api/tests/ (update test files)

** Files to Delete:
   - apps/lab_equipment_api/serializers.py
   - apps/lab_equipment_api/views.py  
   - apps/lab_equipment_api/urls.py
   - apps/lab_equipment_api/permissions.py
   - apps/lab_equipment_api/throttling.py
   - apps/lab_equipment_api/authentication.py
   - apps/lab_equipment_api/middleware.py

* Research Sources

** Official Documentation:
   - Wagtail Django Ninja Integration: https://docs.wagtail.org/en/latest/advanced_topics/api/django-ninja.html
   - Django Ninja Tutorial: https://django-ninja.dev/tutorial/
   - Django Ninja ModelSchema docs: For Wagtail Page compatibility

** Key Validation:
   - ✅ Official Wagtail support confirmed
   - ✅ Page model compatibility verified
   - ✅ Performance benefits documented
   - ✅ Migration path established

* Next Steps for Implementation

1. **User Approval**: Confirm switch to Django Ninja approach
2. **Backup Current State**: Ensure DRF implementation is preserved
3. **Begin Phase 1**: Django Ninja setup and basic configuration
4. **Create Schema POC**: Prove Wagtail Page model compatibility
5. **Implement Core Endpoints**: Start with health check and basic equipment list
6. **Test Integration**: Verify page_ptr_id issue resolution
7. **Full Migration**: Complete remaining endpoints
8. **Cleanup**: Remove DRF dependencies and files

* Success Criteria

** Technical:
   - All existing API functionality preserved
   - Related Equipment test passes (page_ptr_id resolved)
   - No performance regression (should improve)
   - OpenAPI documentation available

** Code Quality:
   - Reduced codebase complexity
   - Better type safety
   - Improved maintainability
   - Enhanced developer experience

* Conclusion

The switch to Django Ninja is not just a fix for the page_ptr_id issue, but a significant upgrade to the API architecture. It resolves the compatibility problem while providing better performance, developer experience, and future-proofing the codebase.

**Recommendation**: Proceed with Django Ninja migration as the optimal solution for resolving DRF + Wagtail compatibility issues while improving the overall API architecture. 