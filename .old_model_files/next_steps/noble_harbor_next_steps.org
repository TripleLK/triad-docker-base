#+TITLE: Noble Harbor Next Steps
#+DATE: 2025-01-19
#+MODEL: Noble Harbor
#+FILETAGS: :next-steps:api:refactoring:

* IMMEDIATE PRIORITY TASKS ðŸš¨

** 1. Fix API URL Routing (CRITICAL)
Current Issue: Test script expects `api/v2/` but config routes to `api/`

*** Action Required:
- [ ] Update `config/urls.py` to include versioned API routing
- [ ] Add v2 namespace: `path("api/v2/", include('apps.lab_equipment_api.urls'))`
- [ ] Test all endpoints work at `api/v2/` path
- [ ] Update test script if needed

** 2. Fix CSRF Token Issues for API
Current Issue: POST requests failing with CSRF verification

*** Action Required:
- [ ] Add CSRF exemption decorator to REST API views
- [ ] Ensure token authentication works properly
- [ ] Validate authentication endpoints return tokens correctly

** 3. API Structure Refactoring (PRIMARY GOAL)
Current Issue: Monolithic files are hard to maintain

*** Step-by-Step Refactoring Plan:

**** Phase A: Create Directory Structure
- [ ] Create `apps/lab_equipment_api/views/` directory
- [ ] Create `apps/lab_equipment_api/serializers/` directory  
- [ ] Create `apps/lab_equipment_api/urls/` directory
- [ ] Add `__init__.py` files to all new directories

**** Phase B: Extract System Components
- [ ] Move system views to `views/system_views.py`:
  - HealthCheckView, SystemStatsView, TokenAuthView, TestView
- [ ] Create system serializers if needed
- [ ] Create `urls/system_urls.py` for system endpoints

**** Phase C: Extract Equipment Components
- [ ] Move `LabEquipmentViewSet` to `views/equipment_views.py`
- [ ] Move equipment serializers to `serializers/equipment_serializers.py`
- [ ] Create `urls/equipment_urls.py` for equipment endpoints

**** Phase D: Extract Other Components
- [ ] Move model views/serializers to respective files
- [ ] Move accessory views/serializers to respective files  
- [ ] Move tag views/serializers to respective files
- [ ] Move cart views/serializers to respective files
- [ ] Move bulk serializers to `serializers/bulk_serializers.py`

**** Phase E: Update Import Structure
- [ ] Update main `urls.py` to import from new structure
- [ ] Update main `views.py` and `serializers.py` to import from subdirectories
- [ ] Add proper `__init__.py` imports for clean API
- [ ] Test all imports work correctly

**** Phase F: Validation and Testing
- [ ] Run full test suite to ensure no regressions
- [ ] Update test script if paths changed
- [ ] Validate all API endpoints still work
- [ ] Check Django admin still functions

** 4. Update Project Documentation
- [ ] Update `triad_project_architecture.org` with new API structure
- [ ] Document new file organization in architecture file
- [ ] Update any developer documentation
- [ ] Create API structure diagram if helpful

* TECHNICAL CONSIDERATIONS

** Import Management
- Use relative imports within app: `from .system_views import HealthCheckView`  
- Use absolute imports for external apps: `from apps.base_site.models import LabEquipmentPage`
- Ensure `__init__.py` files export necessary classes cleanly

** Testing Strategy
- Run tests after each refactoring phase
- Ensure no functionality is lost during restructuring
- Test both API endpoints and Django admin interface
- Validate import structure works in production environment

** File Organization Principles
- Group related functionality together (views + serializers + URLs)
- Keep file sizes manageable (under 200 lines when possible)
- Use clear, descriptive names for modules
- Maintain consistent naming conventions

* SUCCESS CRITERIA

** Functional Requirements
- [ ] All API endpoints accessible and working
- [ ] No regression in existing functionality  
- [ ] Test suite passes completely
- [ ] Authentication and permissions work correctly

** Code Quality Requirements  
- [ ] No file over 300 lines (current views.py is 528 lines)
- [ ] Clear separation of concerns
- [ ] Easy to locate specific functionality
- [ ] Consistent import structure
- [ ] Proper documentation of new structure

** Maintainability Requirements
- [ ] New developers can easily find relevant code
- [ ] Individual components can be modified independently
- [ ] Clear dependency relationships between modules
- [ ] Future API versions can be added easily

* ESTIMATED TIME
- URL fixes: 30 minutes
- Directory structure creation: 15 minutes  
- Component extraction: 2-3 hours (methodical approach)
- Testing and validation: 1 hour
- Documentation updates: 30 minutes

**Total Estimated Time: 4-5 hours**

* RISK MITIGATION
- Create backup of current working code before starting
- Refactor incrementally and test at each step
- Keep original files until new structure is validated
- Use version control commits for each phase 